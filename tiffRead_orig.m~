function varargout = tiffRead(fPath, castType, isSilent)
% [img, metadata] = tiffRead(fPath, castType, isSilent)

%turn off warning thrown by reading in scanImage3 files
warning('off','MATLAB:imagesci:tiffmexutils:libtiffWarning'),

if ~exist('castType', 'var') || isempty(castType)
    castType = 'double';
end

if ~exist('isSilent', 'var') || isempty(isSilent)
    isSilent = false;
end

% Gracefully handle missing extension:
if exist(fPath, 'file') ~= 2
    if exist([fPath, '.tif'], 'file')
        fPath = [fPath, '.tif'];
    elseif exist([fPath, '.tiff'], 'file')
        fPath = [fPath, '.tiff'];
    else
        error(['Could not find ' fPath '.'])
    end
end

% Create Tiff object:
% jyr use orig tiff headers--            
%pts = strsplit(fPath, '_scaledfiji');
%fPath_meta = strcat(pts(1), pts(2));
%t = Tiff(fPath_meta{1});
%t = Tiff(fPath);
t = imfinfo(fPath);

% Get number of directories (= frames):
% t.setDirectory(1);
% while ~t.lastDirectory
%     t.nextDirectory;
% end
% nDirectories = t.currentDirectory;
nDirectories = length(t);

% Load all directories (= frames):
% img = zeros(t.getTag('ImageLength')*2, ...
%     t.getTag('ImageWidth'), ...
%     nDirectories, ...
%     castType);
img = zeros(t(1).Height, ...
    t(1).Width, ...
    nDirectories, ...
    castType);

% for i = 1:nDirectories
%     t.setDirectory(i);
%     img(:,:,i) = t.read;
%     
%     if ~isSilent && ~mod(i, 200)
%         fprintf('%1.0f frames of %d loaded.\n', i, nDirectories);
%     end
% end
fid = tifflib('open', fPath, 'r');
rps = tifflib('getField', fid, Tiff.TagID.RowsPerStrip);

% for i = 1:nDirectories
%     t.setDirectory(i);
%     img(:,:,i) = t.read;
%     
%     if ~isSilent && ~mod(i, 200)
%         fprintf('%1.0f frames of %d loaded.\n', i, nDirectories);
%     end
% end
for i = 1:nDirectories
    tifflib('setDirectory',fid,i);
   % Go through each strip of data.
   rps = min(rps,t(1).Height);
   for r = 1:rps:t(1).Height)
      row_inds = r:min(t(i).Height),r+rps-1);
      stripNum = tifflib('computeStrip',fid,r);
      img(row_inds,:,i) = tifflib('readEncodedStrip',fid,stripNum);
   end
    
    if ~isSilent && ~mod(i, 200)
        fprintf('%1.0f frames of %d loaded.\n', i, nDirectories);
    end
end
tifflib('close', fid);

varargout{1} = img;

%turn back on warning to avoid conflicts later
warning('on','MATLAB:imagesci:tiffmexutils:libtiffWarning'),

% Scanimage metadata: Tiffs saved by Scanimage contain useful metadata in
% form of a struct. This data can be requested as a second output argument.
if nargout > 1
    % Check if this Tiff has valid scanimage metadata and get version:
    try
        imgDesc = t.getTag('ImageDescription');
    catch
        imgDesc = [];
    end
    if isempty(imgDesc)
        scanImageVersion = -1;
    else
        if ~isempty(strfind(imgDesc, 'scanimage'))
            scanImageVersion = 4;
        elseif ~isempty(strfind(imgDesc, 'state.'))
            scanImageVersion = 3;
        elseif ~isempty(strfind(imgDesc, 'dcOverVoltage')) || ~isempty(strfind(imgDesc, 'ImageJ'))
            scanImageVersion = 2016;
        else
            scanImageVersion = -1;
        end
    end
    
    switch scanImageVersion
        case 3
            lineDesc = regexp(imgDesc,'state.','start');
            lineDesc(end+1) = length(imgDesc)+1;
            for e = 1:length(lineDesc)-1
                eval([imgDesc(lineDesc(e):lineDesc(e+1)-2) ';']);
            end
            varargout{2} = state;
        case 4
            imgDescC = regexp(imgDesc, 'scanimage\..+? = .+?(?=\n)', 'match');
            imgDescC = strrep(imgDescC, '<nonscalar struct/object>', 'NaN');
            imgDescC = strrep(imgDescC, '<unencodeable value>', 'NaN');
            for e = imgDescC;
                eval(['s.' e{:} ';']);
            end
            varargout{2} = s.scanimage;
        case 2016
            siHeader = scanimage.util.opentif(fPath);
%             pts = strsplit(fPath, '_scaledfiji');
%             fPath_meta = strcat(pts(1), pts(2));
%             siHeader = scanimage.util.opentif(fPath_meta{1});
            varargout{2} = siHeader;
        case -1
            % Not a scanimage file. Since a second output argument was
            % requested, we use a fake scanimage metadata to make the Acq2P
            % object work with non-scanimage tiffs:
            varargout{2} = createScanimageMetadataStruct;
            warning('Could not find scanimage metadata in raw tiff file. Using fake metadata generated by createScanimageMetadataStruct.m');
    end
end

% Close:
t.close();
